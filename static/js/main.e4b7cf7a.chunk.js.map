{"version":3,"sources":["components/Filter.js","context/createDataContext.js","constants/api_url.js","api/index.js","context/weatherContext.js","components/WeatherIcons.js","components/WeatherState.js","components/HumidityWind.js","components/WeatherSummary.js","components/Graph.js","components/WeatherDetailItem.js","components/Details.js","App.js","reportWebVitals.js","index.js"],"names":["Filter","getData","getForecast","className","name","onFinish","values","location","setTimeout","Item","label","createDataContext","reducer","actions","defaultValue","Context","React","createContext","Provider","children","useReducer","state","dispatch","boundActions","key","value","api_key","options","baseURL","instance","axios","create","action","type","data","payload","forecast","getWeatherData","a","weatherApi","method","url","response","console","log","WeatherIcons","WeatherState","HumidityWind","humidity","wind","WeatherSummary","weather","main","speed","Graph","list","chartRef","useRef","useState","setChartInstance","chartData","labels","filter","reading","dt_txt","includes","map","item","push","temp","datasets","useEffect","current","newChartInstance","Chartjs","classes","graphContainer","id","ref","WeatherDetailItem","DetailsForecast","index","date","moment","unix","dt","format","App","useContext","WeatherContext","span","Object","keys","length","style","padding","minHeight","Details","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4b7cf7a.chunk.js","sourcesContent":["import {Form, Input} from 'antd';\n\nfunction Filter({getData, getForecast}) {\n\n    const onFinish = values => {\n        getData(values.location);\n        setTimeout(() => {\n            getForecast(values.location)\n        }, 900);\n    };\n\n    return (\n        <div className=\"filter\">\n            <Form name=\"filter-location\" onFinish={onFinish}>\n                <Form.Item name=\"location\" label=\"Your city\">\n                    <Input/>\n                </Form.Item>\n            </Form>\n        </div>\n    )\n}\n\nexport default Filter;","import React, {useReducer} from \"react\";\n\nconst createDataContext = (reducer, actions, defaultValue) => {\n    const Context = React.createContext();\n\n    const Provider = ({children}) => {\n        const [state, dispatch] = useReducer(reducer, defaultValue);\n\n        const boundActions = {};\n        for(let key in actions){\n            boundActions[key] = actions[key](dispatch);\n        }\n\n        return (\n            <Context.Provider value={{state, ...boundActions}}>\n                {children}\n            </Context.Provider>\n        );\n    };\n\n    return { Context, Provider };\n};\n\nexport default createDataContext;","export const api_key = \"b829551248311c33c67e8704b2c80a98\";\nexport const url_base_weather = \"https://api.openweathermap.org/data/2.5/\";\n","import axios from 'axios';\nimport {url_base_weather} from \"../constants/api_url\";\n\nconst options = {\n    baseURL: url_base_weather,\n};\nconst instance = axios.create(options);\n\n// instance.interceptors.request.use(\n//     config => {\n//         const token = api_key\n//         if (token) {\n//             config.headers.Authorization = `Bearer ${token}`;\n//         }\n//         return config;\n//     }\n// );\n\nexport default instance;","import createDataContext from \"./createDataContext\";\nimport weatherApi from \"../api/\"\nimport {api_key} from \"../constants/api_url\";\n\nconst weatherReducer = (state, action) => {\n    switch (action.type) {\n        case 'set_weather':\n            return {...state, data: action.payload}\n        case 'set_forecast':\n            return {...state, forecast: action.payload}\n        default:\n            return state;\n    }\n}\n\nconst getWeatherData = dispatch => async location => {\n\n    const response = await weatherApi({\n        method: 'get',\n        url: `weather?q=${location}&appid=${api_key}`\n    });\n\n    dispatch({type: 'set_weather', payload: response.data});\n}\n\nconst getForecast = dispatch => async location => {\n    const response = await weatherApi({\n        method: 'get',\n        url: `forecast?q=${location}&appid=${api_key}`\n    });\n\n    console.log(\"response Forecast\",response.data);\n\n    dispatch({type: 'set_forecast', payload: response.data});\n}\n\nexport const {Provider, Context} = createDataContext(\n    weatherReducer,\n    {getWeatherData, getForecast},\n    {data: {}, forecast: {}}\n);","import { WiDayThunderstorm,WiRainWind, WiDaySunny,WiDayShowers,\n    WiDaySnowWind,\n    WiDayFog,\n    WiSmoke,\n    WiCloudy,\n\n\n} from \"react-icons/wi\";\n\nconst WeatherIcons = ({name})=>{\n    switch (name) {\n        case 'Thunderstorm':\n            return <WiDayThunderstorm/>\n        case 'Drizzle':\n            return <WiDayShowers/>\n        case 'Rain':\n            return <WiRainWind/>\n        case 'Snow':\n            return <WiDaySnowWind/>\n        case 'Mist':\n        case 'Fog':\n            return <WiDayFog/>\n        case 'Smoke':\n            return <WiSmoke/>\n        case 'Haze':\n            return <WiRainWind/>\n        case 'Dust':\n            return <WiRainWind/>\n\n        case 'Sand':\n            return <WiRainWind/>\n        case 'Ash':\n            return <WiRainWind/>\n        case 'Squall':\n            return <WiRainWind/>\n        case 'Tornado':\n            return <WiRainWind/>\n        case 'Clouds':\n            return <WiCloudy/>\n        default:\n            return <WiDaySunny/>\n\n\n    }\n}\n\nexport default WeatherIcons;","import PropTypes from 'prop-types';\nconst WeatherState = ({name, value, className}) => {\n    return (\n        <>\n            <p>{name}</p>\n            <span className={className}>\n                    {value}\n            </span>\n        </>\n    )\n}\n\nWeatherState.propTypes = {\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    className: PropTypes.string\n}\n\nexport default WeatherState;","import PropTypes from 'prop-types';\nimport WeatherState from \"./WeatherState\";\n\nconst HumidityWind = ({humidity, wind}) => {\n    return (\n        <div className=\"humidity-wind\">\n            <div className=\"humidity\">\n                <WeatherState name=\"Humidity\" value={ `${humidity} %` } className=\"humidity-percent\"/>\n            </div>\n            <div className=\"wind\">\n                <WeatherState name=\"Wind speed\" value={ `${wind} km/j` } className=\"wind-speed\"/>\n            </div>\n        </div>\n    )\n}\n\nHumidityWind.propTypes = {\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired\n}\n\nexport default HumidityWind;","import WeatherIcons from \"../components/WeatherIcons\";\nimport HumidityWind from \"./HumidityWind\";\nimport PropTypes from 'prop-types';\n\nconst WeatherSummary = ({weather, main, wind}) => {\n    const name = weather[0] ? weather[0].main : \"Clear\";\n    return (\n        <>\n            <div className=\"weatherCont\">\n                <WeatherIcons name={name}/>\n                <p>{name}</p>\n            </div>\n            <HumidityWind humidity={main.humidity} wind={wind.speed}/>\n        </>\n    )\n}\n\nWeatherSummary.propTypes = {\n    weather: PropTypes.array.isRequired,\n    main: PropTypes.object.isRequired,\n    wind: PropTypes.object.isRequired\n}\n\nexport default WeatherSummary;","import {useRef, useEffect, useState} from \"react\";\nimport Chartjs from 'chart.js';\nimport PropTypes from 'prop-types';\nimport classes from \"./lineChart.css\";\n\nconst Graph = ({list}) => {\n    const chartRef = useRef(null);\n    const [, setChartInstance] = useState(null);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const chartData = {\n        type: 'line',\n    };\n\n    let labels = [];\n    let data = [];\n\n    list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\n        .map(item => {\n            labels.push(item.main.temp);\n            data.push(item.main.temp);\n            return 0;\n        })\n\n    chartData.data = {\n        labels: labels,\n        datasets: [\n            {\n                label: \"Temp\",\n                data: data\n            }\n        ]\n    }\n\n    useEffect(() => {\n        if (chartRef && chartRef.current) {\n            const newChartInstance = new Chartjs(chartRef.current, chartData);\n            setChartInstance(newChartInstance);\n        }\n    }, [chartData, chartRef]);\n\n    return (\n        <div className={classes.graphContainer}>\n            <canvas id=\"my-chart\" ref={chartRef}/>\n        </div>\n    )\n}\n\nGraph.propTypes = {\n    list: PropTypes.array.isRequired,\n};\n\nexport default Graph\n","import PropTypes from 'prop-types';\nimport WeatherIcons from \"./WeatherIcons\";\nimport WeatherState from \"./WeatherState\";\n\nconst WeatherDetailItem = ({weather, main}) => {\n    const {humidity} = main;\n    const name = weather[0] ? weather[0].main : \"Clear\";\n    return (\n        <div>\n            <div className=\"weatherItem\">\n                <WeatherIcons name={name}/>\n                <p>{name}</p>\n                <div className=\"humidity\">\n                    <WeatherState name=\"Humidity\" value={ `${humidity} %` } className=\"humidity-percent\"/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nWeatherDetailItem.propTypes = {\n    weather: PropTypes.array.isRequired,\n    main: PropTypes.object.isRequired,\n}\nexport default WeatherDetailItem;","import PropTypes from 'prop-types';\nimport WeatherDetailItem from \"./WeatherDetailItem\";\nimport moment from \"moment\";\n\nconst DetailsForecast = ({list}) => {\n    return (\n        <div className=\"forecast\">\n            {\n                list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\n                    .map((item, index) => {\n                        let date = moment.unix(item.dt).format('MMMM Do YYYY');\n                        if (index === 0) {\n                            date = \"Today\";\n                        }\n\n                        return (\n                            <div className=\"forecast-daily\" key={item.dt}>\n                                {date}\n                                <WeatherDetailItem main={item.main} weather={item.weather}/>\n                            </div>\n                        )\n\n                    })\n            }\n        </div>\n    )\n}\n\nDetailsForecast.propTypes = {\n    list: PropTypes.array.isRequired,\n};\n\nexport default DetailsForecast\n","import {useContext} from 'react';\nimport {Layout, Col, Row} from 'antd';\nimport './App.css';\nimport Filter from \"./components/Filter\";\nimport {Context as WeatherContext} from './context/weatherContext'\nimport WeatherSummary from \"./components/WeatherSummary\";\nimport Graph from \"./components/Graph\";\nimport DetailsForecast from \"./components/Details\";\n\n// const {Content} = Layout;\n\nfunction App() {\n    const {state, getWeatherData, getForecast} = useContext(WeatherContext);\n\n    console.log(\"state\", state)\n    return (\n        <Layout>\n            <Row>\n                <Col span={6}>\n                    <Filter\n                        getData={getWeatherData}\n                        getForecast={getForecast}\n                    />\n                    {\n                        Object.keys(state.data).length > 0 ?\n                            <WeatherSummary\n                                weather={state.data.weather}\n                                wind={state.data.wind}\n                                main={state.data.main}\n                            />\n                            : null\n                    }\n\n                </Col>\n                <Col span={18}>\n                    {/*<Content className=\"site-layout\" style={{padding: '0 50px', marginTop: 64}}>*/}\n                    <div className=\"site-layout-background\" style={{padding: 24, minHeight: 380}}>\n                        {\n                            Object.keys(state.forecast).length > 0 ? (\n                                <>\n                                    <Graph list={state.forecast.list}/>\n                                    <DetailsForecast list={state.forecast.list}/>\n                                </>\n                            ) : null\n                        }\n                    </div>\n                    {/*</Content>*/}\n                </Col>\n            </Row>\n\n        </Layout>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider as WeatherProvider} from './context/weatherContext'\n\nReactDOM.render(\n  <React.StrictMode>\n      <WeatherProvider>\n          <App />\n      </WeatherProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}